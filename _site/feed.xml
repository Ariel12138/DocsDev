<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-09T19:41:20+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">文档代码化开发高级研修班</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">写作利器 Markdown</title><link href="http://localhost:4000/blog/2019/05/05/Markdown-Introduction.html" rel="alternate" type="text/html" title="写作利器 Markdown" /><published>2019-05-05T10:28:00+08:00</published><updated>2019-05-05T10:28:00+08:00</updated><id>http://localhost:4000/blog/2019/05/05/Markdown-Introduction</id><content type="html" xml:base="http://localhost:4000/blog/2019/05/05/Markdown-Introduction.html"></content><author><name></name></author><category term="markdown" /><summary type="html"></summary></entry><entry><title type="html">为什么将技术文档当成代码开发</title><link href="http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes.html" rel="alternate" type="text/html" title="为什么将技术文档当成代码开发" /><published>2019-04-25T14:48:11+08:00</published><updated>2019-04-25T14:48:11+08:00</updated><id>http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes</id><content type="html" xml:base="http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes.html">&lt;p&gt;技术写作最根本的目的，是为了帮助用户了解产品，帮助用户解决产品使用过程中遇到的问题。然而随着产品的精细复杂化，为了覆盖所有细节，技术文档也愈加不友好，变得层级冗杂、晦涩难懂，反而背离了以用户为中心的写作目的，落入以产品为中心的写作俗套。&lt;/p&gt;

&lt;h4 id=&quot;代码开发模式对文档写作的启发&quot;&gt;代码开发模式对文档写作的启发&lt;/h4&gt;
&lt;p&gt;代码开发发展至今，已有不少功能强大的开发者工具，代码开发管理的流程，也从瀑布式开发进展到敏捷开发，从长周期的开发-测试-交付-投入使用，到尽早开发尽早审查-灵活变更需求-不断迭代循环直至产品更加完美的开发模式，也给技术文档带来了启发。&lt;/p&gt;
&lt;h4 id=&quot;敏捷开发&quot;&gt;敏捷开发&lt;/h4&gt;
&lt;p&gt;应用敏捷开发的模式，在需求不够明确的情况下，代码开发的阶段性成果也能够尽早投入审查，并在需求变更后及时进行迭代更新，在不断的沟通协作中，不合理需求和开发人员的错误理解都会慢慢更正。&lt;br /&gt;
同理，体系复杂的技术文档的开发实践中，也可以应用同样的模式。&lt;/p&gt;
&lt;h4 id=&quot;版本控制&quot;&gt;版本控制&lt;/h4&gt;
&lt;p&gt;用版本控制工具管理文档资源，就不需要费心进行版本保存，只需要专注于修改自己文档直到满意，若有需要，完全可以回复到之前的某一版本。&lt;/p&gt;
&lt;h4 id=&quot;代码审查&quot;&gt;代码审查&lt;/h4&gt;
&lt;p&gt;用代码审查的方式审查文档，检查文档可能存在的”bug”，比如任务步骤错误、令文档美观度下降的输入错误、或错误的超链接等，获得更多的审查，就意味着更大的质量提升。&lt;/p&gt;
&lt;h4 id=&quot;发布迭代&quot;&gt;发布迭代&lt;/h4&gt;
&lt;p&gt;在发布迭代方面，传统写作的步骤十分复杂，通过应用代码化管理模式，将文档托管到相关平台如ReadTheDocs自动发布，在文档内容更新之后可立即执行编译发布流程，即时简便实现迭代。&lt;/p&gt;

&lt;h4 id=&quot;文档代码化开发优势&quot;&gt;文档代码化开发优势&lt;/h4&gt;
&lt;p&gt;轻量化写作，易于学习，且排版美观，内容清晰&lt;br /&gt;
专人审查，协同管理，减少错误，提升文档质量&lt;br /&gt;
文档自动构建发布，实时迭代，提高工作效率，节约人力成本&lt;br /&gt;
版本控制，协同写作，高效管理文档系统&lt;/p&gt;</content><author><name></name></author><category term="docs like code" /><summary type="html">技术写作最根本的目的，是为了帮助用户了解产品，帮助用户解决产品使用过程中遇到的问题。然而随着产品的精细复杂化，为了覆盖所有细节，技术文档也愈加不友好，变得层级冗杂、晦涩难懂，反而背离了以用户为中心的写作目的，落入以产品为中心的写作俗套。</summary></entry></feed>