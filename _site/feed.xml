<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2019-05-29T15:37:37+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">文档代码化开发高级研修班</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">工具介绍篇</title><link href="http://localhost:4000/blog/2019/05/28/Prepararion.html" rel="alternate" type="text/html" title="工具介绍篇" /><published>2019-05-28T10:28:00+08:00</published><updated>2019-05-28T10:28:00+08:00</updated><id>http://localhost:4000/blog/2019/05/28/Prepararion</id><content type="html" xml:base="http://localhost:4000/blog/2019/05/28/Prepararion.html">&lt;h4 id=&quot;git-和-github-简介&quot;&gt;Git 和 Github 简介&lt;/h4&gt;

&lt;blockquote&gt;
  &lt;p&gt;Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理&lt;/p&gt;
  &lt;h3 id=&quot;heading&quot;&gt;Heading&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;markdown-简单教程&quot;&gt;Markdown 简单教程&lt;/h4&gt;

&lt;h4 id=&quot;写作工具推荐-vscode&quot;&gt;写作工具推荐： VSCode&lt;/h4&gt;</content><author><name></name></author><summary type="html">Git 和 Github 简介</summary></entry><entry><title type="html">写作利器 Markdown</title><link href="http://localhost:4000/blog/2019/05/05/Markdown-Introduction.html" rel="alternate" type="text/html" title="写作利器 Markdown" /><published>2019-05-05T10:28:00+08:00</published><updated>2019-05-05T10:28:00+08:00</updated><id>http://localhost:4000/blog/2019/05/05/Markdown-Introduction</id><content type="html" xml:base="http://localhost:4000/blog/2019/05/05/Markdown-Introduction.html">&lt;p&gt;提到写作工具，大部分人一定首先想到 Microsoft Word，它功能强大，集成度高，应用范围广，是日常生活中使用最多的。然而功能强大也经常带来认知负荷增加等问题。若应用于网络出版，由 word 文档到 HTML 文件的格式转换也将成为一大难题。&lt;br /&gt;
所以有没有一种更简洁，更专注于网络发布的工具呢？这样的想法早已成为现实，要归功于 Markdown 的存在。2004年， John Gruber 发布首版 Markdown，允许人们”使用易读易写的纯文本格式编写文档，然后选择性转换成有效的 XHTML文档”。虽然已经有十多年历史，Markdown 似乎正在进入其发展的黄金时代，&lt;/p&gt;

&lt;h5 id=&quot;markdown-概览&quot;&gt;Markdown 概览&lt;/h5&gt;

&lt;p&gt;Markdown，是一种标记语言（ Markup Language ），可使用普通的文本编辑器进行编写。在某种程度上， Markdown 应用程序类似于纯文本编辑程序，如 Windows 中的记事本或 MacOS 中的 TextEdit，不需要设置字体，不需要调整对齐，没有颜色，没有注释，只剩下写作者和文本。&lt;br /&gt;
与普通文本编辑器不同的是，使用Markdown写作的文本能够同时具有一定格式，在写作时实现快速排版和简单的格式设定。可以设定标题级别，进行加粗、倾斜、生成列表等格式操作，这些都类似于在HTML中可进行的格式操作。&lt;br /&gt;
Markdown的格式编辑十分便捷，将格式与文本融为一体。比如定义一个一级标题，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;# Heading 1&lt;/code&gt;表示，二级标题是&lt;code class=&quot;highlighter-rouge&quot;&gt;## Heading 2&lt;/code&gt;，以此类推；比如加粗某个词语，可以用&lt;code class=&quot;highlighter-rouge&quot;&gt;**Some Word**&lt;/code&gt;……&lt;/p&gt;

&lt;h5 id=&quot;工作原理&quot;&gt;工作原理&lt;/h5&gt;

&lt;p&gt;Markdown 网页发布的工作原理，就是将其纯文本文档内容处理为 HTML 格式（当然，在纯文本层级也是简洁可读的）。与网页开发相同，其他样式如字体、高亮颜色的设置则通过 CSS 来设定，也可以在 Markdown 文档中直接添加样式标签来实现特定需求，比如一个一级标题需要居中，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;center&amp;gt; # Heading 1 &amp;lt;/center&amp;gt;&lt;/code&gt;来实现。&lt;br /&gt;
Markdown 的实现可用于十几种编程语言，适用于几乎所有主要的博客平台。对技术文档写作者来说，又是最轻量简单，易于发布的选择。&lt;/p&gt;</content><author><name></name></author><category term="markdown" /><summary type="html">提到写作工具，大部分人一定首先想到 Microsoft Word，它功能强大，集成度高，应用范围广，是日常生活中使用最多的。然而功能强大也经常带来认知负荷增加等问题。若应用于网络出版，由 word 文档到 HTML 文件的格式转换也将成为一大难题。 所以有没有一种更简洁，更专注于网络发布的工具呢？这样的想法早已成为现实，要归功于 Markdown 的存在。2004年， John Gruber 发布首版 Markdown，允许人们”使用易读易写的纯文本格式编写文档，然后选择性转换成有效的 XHTML文档”。虽然已经有十多年历史，Markdown 似乎正在进入其发展的黄金时代，</summary></entry><entry><title type="html">为什么将技术文档当成代码开发</title><link href="http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes.html" rel="alternate" type="text/html" title="为什么将技术文档当成代码开发" /><published>2019-04-25T14:48:11+08:00</published><updated>2019-04-25T14:48:11+08:00</updated><id>http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes</id><content type="html" xml:base="http://localhost:4000/blog/2019/04/25/Why-Treat-Docs-As-Codes.html">&lt;p&gt;技术写作最根本的目的，是为了帮助用户了解产品，帮助用户解决产品使用过程中遇到的问题。然而随着产品的精细复杂化，为了覆盖所有细节，技术文档也愈加不友好，变得层级冗杂、晦涩难懂，反而背离了以用户为中心的写作目的，落入以产品为中心的写作俗套。&lt;/p&gt;

&lt;h4 id=&quot;代码开发模式对文档写作的启发&quot;&gt;代码开发模式对文档写作的启发&lt;/h4&gt;
&lt;p&gt;代码开发发展至今，已有不少功能强大的开发者工具，代码开发管理的流程，也从瀑布式开发进展到敏捷开发，从长周期的开发-测试-交付-投入使用，到尽早开发尽早审查-灵活变更需求-不断迭代循环直至产品更加完美的开发模式，也给技术文档带来了启发。&lt;/p&gt;
&lt;h4 id=&quot;敏捷开发&quot;&gt;敏捷开发&lt;/h4&gt;
&lt;p&gt;应用敏捷开发的模式，在需求不够明确的情况下，代码开发的阶段性成果也能够尽早投入审查，并在需求变更后及时进行迭代更新，在不断的沟通协作中，不合理需求和开发人员的错误理解都会慢慢更正。&lt;br /&gt;
同理，体系复杂的技术文档的开发实践中，也可以应用同样的模式。&lt;/p&gt;
&lt;h4 id=&quot;版本控制&quot;&gt;版本控制&lt;/h4&gt;
&lt;p&gt;用版本控制工具管理文档资源，就不需要费心进行版本保存，只需要专注于修改自己文档直到满意，若有需要，完全可以回复到之前的某一版本。&lt;/p&gt;
&lt;h4 id=&quot;代码审查&quot;&gt;代码审查&lt;/h4&gt;
&lt;p&gt;用代码审查的方式审查文档，检查文档可能存在的”bug”，比如任务步骤错误、令文档美观度下降的输入错误、或错误的超链接等，获得更多的审查，就意味着更大的质量提升。&lt;/p&gt;
&lt;h4 id=&quot;发布迭代&quot;&gt;发布迭代&lt;/h4&gt;
&lt;p&gt;在发布迭代方面，传统写作的步骤十分复杂，通过应用代码化管理模式，将文档托管到相关平台如ReadTheDocs自动发布，在文档内容更新之后可立即执行编译发布流程，即时简便实现迭代。&lt;/p&gt;

&lt;h4 id=&quot;文档代码化开发优势&quot;&gt;文档代码化开发优势&lt;/h4&gt;
&lt;p&gt;轻量化写作，易于学习，且排版美观，内容清晰&lt;br /&gt;
专人审查，协同管理，减少错误，提升文档质量&lt;br /&gt;
文档自动构建发布，实时迭代，提高工作效率，节约人力成本&lt;br /&gt;
版本控制，协同写作，高效管理文档系统&lt;/p&gt;</content><author><name></name></author><category term="docs like code" /><summary type="html">技术写作最根本的目的，是为了帮助用户了解产品，帮助用户解决产品使用过程中遇到的问题。然而随着产品的精细复杂化，为了覆盖所有细节，技术文档也愈加不友好，变得层级冗杂、晦涩难懂，反而背离了以用户为中心的写作目的，落入以产品为中心的写作俗套。</summary></entry></feed>